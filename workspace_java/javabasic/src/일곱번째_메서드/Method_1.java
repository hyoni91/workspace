package 일곱번째_메서드;
//메서드(체계성) == 함수(Function*기능)

// 메서드는 반복해서 실행하는 코드를 미리 하나의 기능으로 정의 [기능상자]
// 메서드의 사용은 메서드 정의 부분과 메서드 호출 부분으로 나뉜다.
// 메서드를 사용하려면 메서드 정의 후, 반드시 호출 해야함!

// 메서드의 정의는 <클래스 안 + 다른 메서드 밖> 에서 선언한다.
// 메서드는 무한정 정의 가능 BUT 메서드명은 중복 불가(대소문자 구분함)
// 메서드명은 항상 소문자로 작명한다.

// 메서드의 호출은 메서드의 정의 안에서 호출 (프린트)
// 메서드를 호출할 때는 정의한 메서드명을 반드시 일치시켜야한다.
// 메서드를 호출할 때는 정의한 메서드의 매개변수 정보를 일치시켜야 한다.
// (매개변수 parameter : (일정하게 정한) 한도) -> 메서드 정의 부분 소괄호 안에서 정의된 변수//
//  메서드 외부에서 메서드 내부로 전달하는 입력 값이 존재한다. 이를 매개변수라 한다.(값(데이터)은 변수를 통해 저장)
// 매개변수 정보 : 매개변수 자료형, 매개변수 갯수
// 매개변수의 역할 : 메서드의 기능을 구현할 때 필요한 데이터를 외부로 받아오는 것.

// 리턴타입 : 메서드의 실행 결과 값을 외부로 전달할 때 사용한다.  리턴타입은 메서드의 실행결과 외부로 전달 될 데이터의 타입과 일치시켜야함.
// 실행결과 리턴할 데이터가 없을 때는 리턴타입에 void 를 사용함.
// 메서드의 실행결과 리턴 데이터가 있다면 메서드 내부에서 'return' 키워드를 사용한다.
// return 키워드는 항상 메서드의 마지막에 딱 한번만 실행가능!

/* 메서드의 정의 문법

    접근제한자 리턴타입 메서드명 (매개변수정보) {
    }

  자바 제어자 : protect private public default
  반환타입 : 메서드 타입 ( void , int, double ,String 등등 )
  메서드 명 : 메서드 이름
  매개 변수 : 어떤 재료를 필요로 하는가

    ex)↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
    public static void 메서드명 (){

    }

  메서드 타입이 void 가 아닌 경우에는 반드시 return 문이 존재해야 한다.
  Return 문은 작업을 수행한 결과값이 메서드로 전달된다.
  Return 문의 결과값은 반드시 변환타입과 일치하거나 자동형 변환이 가능해야한다.


*/

public class Method_1 {

    //메서드의 정의
    public static void hello(){

        System.out.println("hello");


    }

    //자바 코드의 해석은 main 메서드의 첫 줄 부터 마지막 줄까지 차례로 실행!!!!
    public static void main(String[] args) {

        //메서드의 호출
        hello();
//        hello();  // 여러번 실행 가능
        hi(); //메인 메서드 밖에서 정의해도 호출가능



    }

    public static void hi(){

        System.out.println("hi method");
        hello();

    }
}
