 DROP TABLE customers;
 DROP TABLE CATEGORY;
 DROP TABLE products;
 DROP TABLE order_requests;
 DROP TABLE PAYMENTS;
 DROP TABLE orders;
 DROP TABLE inventory;




-- Orders로 리퀘스트 현황
SELECT 
ORDER_NUM
,O.REQUEST_NUM 
,ORDER_DATE
,ORDER_STATUS
,C.CUSTOMER_NUM
,C.CUSTOMER_NAME
,(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE
FROM order_requests R, orders O , customers C, products P
WHERE O.REQUEST_NUM = R.REQUEST_NUM
AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
AND R.PRODUCT_NUM = P.PRODUCT_NUM
ORDER BY R.REQUEST_NUM;




-- 수주 현황 SELECT 
SELECT REQUEST_NUM 
,REQUEST_DATE
,REQUEST_STATUS
,C.CUSTOMER_NUM
,C.CUSTOMER_NAME
,(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE
FROM order_requests R, customers C, products P
WHERE R.CUSTOMER_NUM = C.CUSTOMER_NUM
AND R.PRODUCT_NUM = P.PRODUCT_NUM
ORDER BY REQUEST_NUM;

SELECT C.CUSTOMER_NAME, R.REQUEST_DATE, P.PRODUCT_NAME, R.QUANTITY, (P.PRODUCT_PRICE * QUANTITY) AS PRODUCT_PRICE, REQUEST_STATUS
  FROM order_requests R , products P , customers C
  WHERE R.PRODUCT_NUM = P.PRODUCT_NUM
  AND C.CUSTOMER_NUM = R.CUSTOMER_NUM
  AND R.REQUEST_NUM = 14;





SELECT * FROM customers;
SELECT * FROM category;
SELECT * FROM products;
SELECT * FROM order_requests;
SELECT * FROM orders;
SELECT * FROM PAYMENTS;
SELECT * FROM INVENTORY;
SELECT * FROM delivery;

DELETE FROM INVENTORY;

-- 해당 제품의 stock이 있는 지 확인
SELECT current_stock 
FROM inventory
WHERE product_num = 3;

-- 배송대기 중인 상품의 수량 합계 
SELECT SUM(QUANTITY)
FROM order_requests r , orders o
WHERE r.REQUEST_NUM = o.REQUEST_NUM
and PRODUCT_NUM = 3
AND o.ORDER_STATUS = '배송대기';




DELETE FROM INVENTORY 
WHERE INVENTORY_NUM = 1;

DELETE FROM customers 
WHERE CUSTOMER_NUM = 5 AND 4;



-- 재고 입고 출하 테이블 
UPDATE inventory
SET INCOMING_QTY = 100,
	CURRENT_STOCK = (CURRENT_STOCK + 100)
WHERE INVENTORY_NUM = 6;

UPDATE inventory
SET OUTGOING_QTY = 1000,
	 CURRENT_STOCK = (CURRENT_STOCK - 1000)
WHERE INVENTORY_NUM = 6;


UPDATE inventory
SET OUTGOING_QTY = 40
	,OUT_DATE = NOW()
WHERE PRODUCT_NUM = 3;



SELECT REQUEST_NUM, PRODUCT_NAME, QUANTITY, REQUEST_STATUS, REQUEST_DATE
FROM ORDER_REQUESTS O , PRODUCTS P
WHERE O.PRODUCT_NUM = P.PRODUCT_NUM;

SELECT O.ORDER_NUM, R.REQUEST_NUM, C.CUSTOMER_NAME, C.CUSTOMER_TEL, O.ORDER_STATUS
FROM ORDERS O , ORDER_REQUESTS R, CUSTOMERS C
WHERE R.CUSTOMER_NUM = C.CUSTOMER_NUM;

-- 수주상세페이지
SELECT R.REQUEST_DATE, P.PRODUCT_NAME, R.QUANTITY, P.PRODUCT_PRICE, (P.PRODUCT_PRICE * QUANTITY) AS PRICE
FROM order_requests R , products P
WHERE R.PRODUCT_NUM = P.PRODUCT_NUM
AND R.CUSTOMER_NUM = 12 ;




-- 거래처
CREATE TABLE CUSTOMERS(
	CUSTOMER_NUM INT AUTO_INCREMENT PRIMARY KEY
	, CUSTOMER_NAME VARCHAR(100) NOT NULL UNIQUE
	, CUSTOMER_OWNER VARCHAR(50) NOT NULL 
	, BUSINESS_NUMBER VARCHAR(100) NOT NULL
	, CUSTOMER_ADDR VARCHAR(200) NOT NULL
	, CUSTOMER_TEL VARCHAR(50) NOT NULL
	, CUSTOMER_EMAIL VARCHAR(50) UNIQUE
);

-- 카테고리
CREATE TABLE CATEGORY(
	CATE_NUM INT AUTO_INCREMENT PRIMARY KEY
	, CATE_NAME VARCHAR(100) NOT NULL UNIQUE
);

-- 상품정보
CREATE TABLE PRODUCTS(
	PRODUCT_NUM INT AUTO_INCREMENT PRIMARY KEY
	, PRODUCT_NAME VARCHAR(100) NOT NULL 
	, CATE_NUM INT REFERENCES CATEGORY(CATE_NUM) ON DELETE CASCADE
	, PRODUCT_PRICE INT NOT NULL
	, STOCK INT NOT NULL 
	, DETAIL VARCHAR(300)
);


-- 발주
CREATE TABLE ORDER_REQUESTS(
 REQUEST_NUM INT AUTO_INCREMENT PRIMARY KEY
 , PRODUCT_NUM INT REFERENCES PRODUCTS(PRODUCT_NUM) ON DELETE CASCADE
 , CUSTOMER_NUM INT REFERENCES CUSTOMERS(CUSTOMER_NUM) ON DELETE CASCADE
 , QUANTITY INT NOT NULL
 ,REQUEST_STATUS ENUM('배송대기','배송완료', '주문취소') NOT NULL DEFAULT '배송대기'
 , REQUEST_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);


-- 수주 테이블
CREATE TABLE ORDERS(
 ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , ORDER_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , ORDER_STATUS ENUM('배송대기', '배송중', '배송완료', '주문취소') NOT NULL DEFAULT '배송대기'

);


-- 20241004 추가

-- 재고 테이블
CREATE TABLE INVENTORY(
INVENTORY_NUM INT AUTO_INCREMENT PRIMARY KEY
, CATE_NUM INT REFERENCES category(CATE_NUM) ON DELETE CASCADE
, PRODUCT_NUM INT REFERENCES products(PRODUCT_NUM) ON DELETE CASCADE
, PRODUCT_NAME VARCHAR(100) NOT NULL
, STOCK_DATE DATETIME DEFAULT CURRENT_TIMESTAMP -- 입고 일자
, OUT_DATE DATETIME -- 출고 일자
, INITIAL_STOCK INT NOT NULL -- 최초 재고
, INCOMING_QTY INT NOT NULL -- 입고 수량
, OUTGOING_QTY INT NOT NULL -- 출고 수량
, CURRENT_STOCK INT -- 현재 수량 20241008에 추가했어요~ 
);


CREATE TABLE DELIVERY(
    DELIVERY_NUM INT AUTO_INCREMENT PRIMARY KEY,
    ORDER_NUM INT REFERENCES ORDERS(ORDER_NUM) ON DELETE CASCADE,
    DELIVERY_DRIVER_NAME VARCHAR(100) NOT NULL, -- 기사이름
    DELIVERY_DRIVER_PHONE VARCHAR(20) NOT NULL, -- 기사 번호
    DELIVERY_ADDRESS VARCHAR(200) NOT NULL, -- 도착 주소지
	 DELIVERY_START_TIME DATETIME, -- 출발
    DELIVERY_END_TIME DATETIME, -- 도착
    DELIVERY_STATUS ENUM('배송대기', '배송중', '배송완료','배송취소', '반품') NOT NULL DEFAULT '배송대기' -- 배송 상태
);


-- 결제
CREATE TABLE PAYMENTS(
 PAYMENT_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , PAYMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , AMOUNT INT NOT NULL 
 , PAYMENT_METHOD VARCHAR(100) NOT NULL 
 , PAYMENT_STATUS ENUM('결제대기', '결제완료', '결제취소') NOT NULL DEFAULT '결제완료'
);




UPDATE DELIVERY
SET DELIVERY_STATUS = '배송완료';

 SELECT C.CUSTOMER_NAME
 			,C.CUSTOMER_OWNER
 			,C.CUSTOMER_TEL
 			,O.ORDER_NUM
        ,O.ORDER_DATE
        ,P.PRODUCT_NAME
        ,R.QUANTITY
        , P.PRODUCT_PRICE
        ,(P.PRODUCT_PRICE * QUANTITY) AS PRODUCT_PRICE
        ,O.ORDER_STATUS
        FROM order_requests R , products P , orders O, customers C
        WHERE O.REQUEST_NUM = R.REQUEST_NUM
        AND C.CUSTOMER_NUM = R.CUSTOMER_NUM
        AND R.PRODUCT_NUM = P.PRODUCT_NUM
        AND R.REQUEST_NUM = 20;


SELECT
        ORDER_NUM
        ,P.PRODUCT_NUM
        ,O.REQUEST_NUM
        ,ORDER_DATE
        ,ORDER_STATUS
        ,C.CUSTOMER_NUM
        ,C.CUSTOMER_NAME
        ,(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE
        FROM order_requests R, orders O , customers C, products P
        WHERE O.REQUEST_NUM = R.REQUEST_NUM
        AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
        AND R.PRODUCT_NUM = P.PRODUCT_NUM;
