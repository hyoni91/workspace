

SHOW CREATE TABLE products;

DROP TABLE customers;

SELECT * FROM orders;
UPDATE orders 
SET ORDER_status  = '배송완료'
WHERE order_num = 3;

SELECT * FROM orders
where order_date = '2024-10-18 16:49:24';

INSERT INTO order_requests(
	PRODUCT_NUM
	,CUSTOMER_NUM
	,QUANTITY

) VALUES(
	4
	,31
	,1000
),(
	5
	,31
	,5000
);


SELECT
  ORDER_NUM
  ,O.REQUEST_NUM
  ,ORDER_DATE
  ,ORDER_STATUS
  ,C.CUSTOMER_NUM
  ,C.CUSTOMER_NAME
  ,SUM((R.QUANTITY * P.PRODUCT_PRICE)) as TOTALPRICE
  ,P.PRODUCT_NUM
  ,SUM(QUANTITY) AS QUANTITY
  FROM order_requests R, orders O , customers C, products P, inventory I
  WHERE O.REQUEST_NUM = R.REQUEST_NUM
  AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
  AND R.PRODUCT_NUM = P.PRODUCT_NUM
  AND P.PRODUCT_NUM = I.PRODUCT_NUM
  AND O.ORDER_STATUS = '배송대기'
  GROUP BY O.ORDER_DATE
  ORDER BY R.REQUEST_NUM DESC;


SELECT R.PRODUCT_NUM, SUM(QUANTITY) 
FROM orders O, order_requests R
WHERE O.REQUEST_NUM = R.REQUEST_NUM 
AND O.ORDER_STATUS = '배송대기'
GROUP BY R.PRODUCT_NUM;

SELECT I.PRODUCT_NUM, CURRENT_STOCK
FROM inventory I, order_requests R
WHERE I.PRODUCT_NUM = R.PRODUCT_NUM
GROUP BY I.PRODUCT_NUM;


SELECT R.PRODUCT_NUM, 
CASE 
	WHEN (I.CURRENT_STOCK - SUM(QUANTITY)) <  -1 THEN '!'
	ELSE '-' 
	END AS CHECK_STOCK 
FROM orders O, order_requests R , inventory I
WHERE O.REQUEST_NUM = R.REQUEST_NUM 
AND I.PRODUCT_NUM = R.PRODUCT_NUM
AND O.ORDER_STATUS = '배송대기'
GROUP BY R.PRODUCT_NUM;



SELECT 
    R.PRODUCT_NUM, 
    CASE 
        WHEN (CURRENT_STOCK - SUM(QUANTITY)) < -1
    END AS CHECK_STOCK
FROM orders O
JOIN order_requests R ON O.REQUEST_NUM = R.REQUEST_NUM
JOIN inventory I ON I.PRODUCT_NUM = R.PRODUCT_NUM
WHERE O.ORDER_STATUS = '배송대기'
GROUP BY R.PRODUCT_NUM;



-- 241022 그룹화 개개인

 SELECT C.CUSTOMER_NAME
        ,C.CUSTOMER_ADDR
        ,C.CUSTOMER_OWNER
        ,C.CUSTOMER_TEL
        ,O.ORDER_NUM
        ,O.ORDER_DATE
        ,P.PRODUCT_NAME
        ,R.PRODUCT_NUM
        ,R.QUANTITY
        , P.PRODUCT_PRICE
        ,(P.PRODUCT_PRICE * QUANTITY) AS PRODUCT_PRICE
        ,O.ORDER_STATUS
        FROM order_requests R , products P , orders O, customers C
        WHERE O.REQUEST_NUM = R.REQUEST_NUM
        AND C.CUSTOMER_NUM = R.CUSTOMER_NUM
        AND R.PRODUCT_NUM = P.PRODUCT_NUM
        AND O.ORDER_DATE = '2024-10-21 16:56:53'
		  AND O.ORDER_STATUS = '배송대기';



-- -------------------------------------------------------


-- 결제
CREATE TABLE PAYMENTS(
 PAYMENT_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , PAYMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , AMOUNT INT NOT NULL 
 , PAYMENT_METHOD VARCHAR(100) NOT NULL 
 , PAYMENT_STATUS ENUM('결제대기', '결제완료', '결제취소') NOT NULL DEFAULT '결제완료'
);




UPDATE DELIVERY
SET DELIVERY_STATUS = '배송완료';

 SELECT C.CUSTOMER_NAME
 			,C.CUSTOMER_OWNER
 			,C.CUSTOMER_TEL
 			,O.ORDER_NUM
        ,O.ORDER_DATE
        ,P.PRODUCT_NAME
        ,R.QUANTITY
        , P.PRODUCT_PRICE
        ,(P.PRODUCT_PRICE * QUANTITY) AS PRODUCT_PRICE
        ,O.ORDER_STATUS
        FROM order_requests R , products P , orders O, customers C
        WHERE O.REQUEST_NUM = R.REQUEST_NUM
        AND C.CUSTOMER_NUM = R.CUSTOMER_NUM
        AND R.PRODUCT_NUM = P.PRODUCT_NUM
        AND R.REQUEST_NUM = 20;


SELECT
        ORDER_NUM
        ,P.PRODUCT_NUM
        ,O.REQUEST_NUM
        ,ORDER_DATE
        ,ORDER_STATUS
        ,C.CUSTOMER_NUM
        ,C.CUSTOMER_NAME
        ,(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE
        FROM order_requests R, orders O , customers C, products P
        WHERE O.REQUEST_NUM = R.REQUEST_NUM
        AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
        AND R.PRODUCT_NUM = P.PRODUCT_NUM;
        
        
-- 수정 전 배송 테이블
CREATE TABLE DELIVERY(
    DELIVERY_NUM INT AUTO_INCREMENT PRIMARY KEY,
    ORDER_NUM INT REFERENCES ORDERS(ORDER_NUM) ON DELETE CASCADE,
    DELIVERY_DRIVER_NAME VARCHAR(100) NOT NULL, -- 기사이름
    DELIVERY_DRIVER_PHONE VARCHAR(20) NOT NULL, -- 기사 번호
    DELIVERY_ADDRESS VARCHAR(200) NULL, -- 도착 주소지
	 DELIVERY_START_TIME DATETIME, -- 출발
    DELIVERY_END_TIME DATETIME, -- 도착
    DELIVERY_STATUS ENUM('배송대기', '배송중', '배송완료','배송취소', '반품') NOT NULL DEFAULT '배송대기' -- 배송 상태
);


-- 수정 전 수주 테이블
CREATE TABLE ORDERS(
 ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , ORDER_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , ORDER_STATUS ENUM('배송대기', '배송중', '배송완료', '주문취소') NOT NULL DEFAULT '배송대기'

);








-- ----------쿼리 테스트

SELECT
  ORDER_NUM
  ,O.REQUEST_NUM
  ,ORDER_DATE
  ,ORDER_STATUS
  ,C.CUSTOMER_NUM
  ,C.CUSTOMER_NAME
  ,SUM(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE
  ,P.PRODUCT_NUM
  FROM order_requests R, orders O , customers C, products P
  WHERE O.REQUEST_NUM = R.REQUEST_NUM
  AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
  AND R.PRODUCT_NUM = P.PRODUCT_NUM
  AND ORDER_STATUS = '배송완료'
  GROUP BY ORDER_DATE
  ORDER BY R.REQUEST_NUM DESC;
  
  
  SELECT
  ORDER_NUM
  ,O.REQUEST_NUM
  ,ORDER_DATE
  ,ORDER_STATUS
  ,C.CUSTOMER_NUM
  ,C.CUSTOMER_NAME
  ,SUM(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE
  ,P.PRODUCT_NUM
  FROM order_requests R, orders O , customers C, products P
  WHERE O.REQUEST_NUM = R.REQUEST_NUM
  AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
  AND R.PRODUCT_NUM = P.PRODUCT_NUM
  AND ORDER_STATUS != '배송완료'
  GROUP BY ORDER_DATE
  ORDER BY R.REQUEST_NUM DESC;
  
  
-- 위의 코드를 CASE문으로 사용

SELECT
  ORDER_NUM,
  O.REQUEST_NUM,
  ORDER_DATE,
  ORDER_STATUS,
  C.CUSTOMER_NUM,
  C.CUSTOMER_NAME,
  SUM(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE,
  P.PRODUCT_NUM,
  CASE 
    WHEN ORDER_STATUS = '배송완료' THEN 'DONE'
    ELSE 'ING'
  END AS ORDER_STATUS1
FROM 
  order_requests R,
  orders O,
  customers C,
  products P
WHERE 
  O.REQUEST_NUM = R.REQUEST_NUM
  AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
  AND R.PRODUCT_NUM = P.PRODUCT_NUM
GROUP BY 
  ORDER_DATE, ORDER_STATUS
ORDER BY 
  R.REQUEST_NUM DESC;
  
  
  
-- 
SELECT
ORDER_NUM,
O.REQUEST_NUM,
ORDER_DATE,
ORDER_STATUS,
C.CUSTOMER_NUM,
C.CUSTOMER_NAME,
I.CURRENT_STOCK - R.QUANTITY  AS STOCK_CHECK,
SUM(R.QUANTITY * P.PRODUCT_PRICE) as TOTALPRICE,
P.PRODUCT_NUM,
CASE
WHEN ORDER_STATUS = '배송완료' THEN 'DONE' ELSE 'ING'
END AS ORDER_STATUS1
FROM order_requests R, orders O, customers C, products P , inventory I
WHERE O.REQUEST_NUM = R.REQUEST_NUM
AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
AND R.PRODUCT_NUM = P.PRODUCT_NUM
AND I.PRODUCT_NUM = R.PRODUCT_NUM
GROUP BY STOCK_CHECK, ORDER_DATE, ORDER_STATUS 
ORDER BY R.REQUEST_NUM DESC , STOCK_CHECK >=0 ;
  

